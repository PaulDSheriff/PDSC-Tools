using System.Collections.Generic;
using System.Linq;
using PDSC.Common;
using <|NAMESPACE|>.EntityLayer;

namespace <|NAMESPACE|>.DataLayer
{
{|REMOVE_WHEN_NO_AUTO_NUMBER|}
  public partial class <|CLASS_NAME|>Repository : IRepository<<|CLASS_NAME|>, <|CLASS_NAME|>Search>
{|END_REMOVE|}
{|REMOVE_WHEN_AUTO_NUMBER|}
  public partial class <|CLASS_NAME|>Repository : IRepositoryStringPK<<|CLASS_NAME|>, <|CLASS_NAME|>Search>
{|END_REMOVE|}
  {
    #region Constructor
    public <|CLASS_NAME|>Repository(ApplicationDbContext context)
    {
	      _DbContext = context;
    }
    #endregion

    #region Protected Properties
    protected readonly ApplicationDbContext _DbContext;
    #endregion

    #region Get(id) Method
    public <|CLASS_NAME|> Get(<|PK_DOTNET_DATATYPE|> id)
    {
      {|FOR EACH COLUMN:IsPrimaryKey=True|}
      return _DbContext.<|CLASS_DESCRIPTION_PLURAL_NOSPACE|>.Where(p => p.<|COLUMN_PUBLIC_PROPERTY|> == id).FirstOrDefault();
      {|END|}      
    }
    #endregion

    #region Search Method
    public IQueryable<<|CLASS_NAME|>> Search(<|CLASS_NAME|>Search entity)
    {
      IQueryable<<|CLASS_NAME|>> query = _DbContext.<|CLASS_DESCRIPTION_PLURAL_NOSPACE|>;

      // Add WHERE clause(s)
      query = AddWhereClause(query, entity);

      // Add ORDER BY clause(s)
      query = AddOrderByClause(query, entity);

      // Setup Paging
      query = AddPaging(query, entity);

      // Return query
      return query;     
    }
    #endregion
    
    #region AddWhereClause Method
    public IQueryable<<|CLASS_NAME|>> AddWhereClause(IQueryable<<|CLASS_NAME|>> query, <|CLASS_NAME|>Search entity)
    {     
      <|AND_RESET|>
      // Perform Searching
      query = query.Where(x =>
      {|FOR EACH COLUMNANDPARAMETER:IsSearch=true|}
         <|AND|> (string.IsNullOrEmpty(entity.<|COLUMN_PUBLIC_PROPERTY|>) ? true : x.<|COLUMN_PUBLIC_PROPERTY|>.StartsWith(entity.<|COLUMN_PUBLIC_PROPERTY|>))
      {|END|}
          );

      return query;
    }
    #endregion
    
    #region AddOrderByClause Method
    public IQueryable<<|CLASS_NAME|>> AddOrderByClause(IQueryable<<|CLASS_NAME|>> query, <|CLASS_NAME|>Search entity)
    {      
      // Determine how to sort the data
      switch (entity.SortExpression) {
        {|FOR EACH GRIDCOLUMN|}
        case "<|COLUMN_PUBLIC_PROPERTY_ALL_LOWER|>_asc":
          query = query.OrderBy(x => x.<|COLUMN_PUBLIC_PROPERTY|>);
          break;
        case "<|COLUMN_PUBLIC_PROPERTY_ALL_LOWER|>_desc":
          query = query.OrderByDescending(x => x.<|COLUMN_PUBLIC_PROPERTY|>);
          break;
        {|END|}
      }

      return query;
    }
    #endregion
        
    #region AddPaging Method
    public IQueryable<<|CLASS_NAME|>> AddPaging(IQueryable<<|CLASS_NAME|>> query, <|CLASS_NAME|>Search entity)
    {
      query = query.Skip(entity.PageIndex *
                          entity.PageSize)
                   .Take(entity.PageSize);

      return query;
    }
    #endregion

    #region Count Method
    public int Count(<|CLASS_NAME|>Search entity)
    {
      // Perform Searching
       return _DbContext.<|CLASS_DESCRIPTION_PLURAL_NOSPACE|>.Where(x =>
      {|FOR EACH COLUMNANDPARAMETER:IsSearch=true|}
         <|AND|> (string.IsNullOrEmpty(entity.<|COLUMN_PUBLIC_PROPERTY|>) ? true : x.<|COLUMN_PUBLIC_PROPERTY|>.StartsWith(entity.<|COLUMN_PUBLIC_PROPERTY|>))
      {|END|}
          ).Count();
    }
    #endregion

    #region CreateEmpty Method
    public virtual <|CLASS_NAME|> CreateEmpty()
    {
      return new <|CLASS_NAME|>
      {
        {|FOR EACH COLUMN:IsPrimaryKey=true|}
        <|COMMA|><|COLUMN_PUBLIC_PROPERTY|> = null
        {|END|}
        <|COMMA_CONTINUE|>
        {|FOR EACH COLUMN:IsNotStandardField_IsNotPrimaryKey=true|}
        <|COMMA|><|COLUMN_PUBLIC_PROPERTY|> = <|COLUMN_DOTNET_DEFAULT_VALUE|>
        {|END|}
      };
    }
    #endregion

    #region Insert Method
    public virtual <|CLASS_NAME|> Insert(<|CLASS_NAME|> entity)
    {
      // Add new entity to <|CLASS_DESCRIPTION_PLURAL_NOSPACE|> DbSet
      _DbContext.<|CLASS_DESCRIPTION_PLURAL_NOSPACE|>.Add(entity);

      // Save changes in database
      _DbContext.SaveChanges();
      
      return entity;
    }
    #endregion

    #region Update Method
    public virtual <|CLASS_NAME|> Update(<|CLASS_NAME|> entity)
    {
      // Update entity in <|CLASS_DESCRIPTION_PLURAL_NOSPACE|> DbSet
      _DbContext.<|CLASS_DESCRIPTION_PLURAL_NOSPACE|>.Update(entity);

      // Save changes in database
      _DbContext.SaveChanges();
     
      return entity;
    }
    #endregion

    #region Delete Method
    public virtual bool Delete(<|PK_DOTNET_DATATYPE|> id)
    {
      // Locate the entity to delete in the <|CLASS_NAME|>s DbSet
      _DbContext.<|CLASS_DESCRIPTION_PLURAL_NOSPACE|>.Remove(_DbContext.<|CLASS_DESCRIPTION_PLURAL_NOSPACE|>.Find(id));

      // Save changes in database
      _DbContext.SaveChanges();
      
      return true;
    }
    #endregion
  }
}