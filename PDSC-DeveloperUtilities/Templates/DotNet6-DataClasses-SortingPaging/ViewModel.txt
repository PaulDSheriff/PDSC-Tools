#nullable disable

using PDSC.Common;
using <|NAMESPACE|>.Common;
using <|NAMESPACE|>.EntityLayer;

namespace <|NAMESPACE|>.ViewModelLayer
{
  public partial class <|CLASS_NAME|>ViewModel : AppViewModel
  {
    #region Constructors
    /// <summary>
    ///  NOTE: You need to have a parameterless constructor for Post-Backs in MVC    
    /// </summary>
    public <|CLASS_NAME|>ViewModel() : base()
    {
    }

    {|REMOVE_WHEN:IsPrimaryKeyNotInteger|}
    public <|CLASS_NAME|>ViewModel(IRepository<<|CLASS_NAME|>, <|CLASS_NAME|>Search> repository) : base()
    {|END_REMOVE|}
    {|REMOVE_WHEN:IsPrimaryKeyInteger|}
    public <|CLASS_NAME|>ViewModel(IRepositoryOtherPK<<|PK_LANGUAGE_DATA_TYPE_NEVER_NULLABLE|>, <|CLASS_NAME|>, <|CLASS_NAME|>Search> repository) : base()
    {|END_REMOVE|}
    {
      Repository = repository;
    }
    #endregion

    #region Properties
    {|REMOVE_WHEN:IsPrimaryKeyNotInteger|}
    public IRepository<<|CLASS_NAME|>, <|CLASS_NAME|>Search> Repository { get; set; }
    {|END_REMOVE|}
    {|REMOVE_WHEN:IsPrimaryKeyInteger|}
    public IRepositoryOtherPK<<|PK_LANGUAGE_DATA_TYPE_NEVER_NULLABLE|>, <|CLASS_NAME|>, <|CLASS_NAME|>Search> Repository { get; set; }
    {|END_REMOVE|}
    public List<<|CLASS_NAME|>> <|CLASS_NAME_PLURAL|> { get; set; }
    
    public <|CLASS_NAME|> SelectedEntity { get; set; }
    public <|CLASS_NAME|>Search SearchEntity { get; set; }
    #endregion
    
    #region Init Method
    public override void Init() {
      base.Init();

      <|CLASS_NAME_PLURAL|> = new();
      SelectedEntity = new();
      SearchEntity = new();
      SearchEntity.SortExpression = "<|DESCRIPTION_FIELD|>";
           
      SortExpression = "<|DESCRIPTION_FIELD|>";
    }
    #endregion

    #region Get(id) Method
    public override void Get(<|PK_LANGUAGE_DATA_TYPE_NEVER_NULLABLE|> id)
    {
      IsAdding = false;
      IsDetailVisible = true;

      if (Repository == null) {
        throw new ApplicationException("Must set the Repository property.");
      }
      else {
        SelectedEntity = Repository.Get(id);
      }

      if (SelectedEntity != null) {
        TotalRows = 1;
      }
    }
    #endregion

    #region Search Method
    public override void Search()
    {
      IsDetailVisible = false;
      
      // Store Search Data
      base.StoreSearchAsJson<<|CLASS_NAME|>Search>(SearchEntity);

      // Set Sort Property
      SearchEntity.SortExpression = base.SetSortProperties();

      // Setup the Pager object
      base.SetPagerObject(Repository.Count(SearchEntity));
      SearchEntity.PageSize = base.Pager.PageSize;
      SearchEntity.PageIndex = base.Pager.PageIndex;

      if (Repository == null)
      {
        throw new ApplicationException("Must set the Repository property.");
      }
      else
      {
        <|CLASS_NAME_PLURAL|> = Repository.Search(SearchEntity).ToList();
      }

      if (<|CLASS_NAME_PLURAL|> != null)
      {
        TotalRows = <|CLASS_NAME_PLURAL|>.Count;
      }
    }
    #endregion
    
    #region RestoreSearchFromJson Method
    public void RestoreSearchFromJson() {
      if (!string.IsNullOrEmpty(SearchAsJson)) {
        SearchEntity = base.RestoreSearchFromJson<<|CLASS_NAME|>Search>(SearchAsJson);
      }
    }
    #endregion

    #region CreateEmpty Method
    public override void CreateEmpty()
    {
      IsAdding = true;

      // Set SelectedEntity to an empty <|CLASS_NAME|> object
      SelectedEntity = Repository.CreateEmpty();
    }
    #endregion

    #region Save Method
    public override bool Save()
    {
      if (IsAdding)
      {
        // Adding a new <|CLASS_NAME|>
        Repository.Insert(SelectedEntity);
        IsAdding = false;
      }
      else
      {
        // Editing an existing <|CLASS_NAME|>
        Repository.Update(SelectedEntity);
      }

      return true;
    }
    #endregion
    
    #region Validate Method
    public override bool Validate() {
      IsValid = false;
      Messages = new List<string>();

      // TODO: Validate Your Properties Here

      IsValid = (Messages.Count == 0);

      return IsValid;
    }
    #endregion

    #region Delete Method
    public override bool Delete(<|PK_LANGUAGE_DATA_TYPE_NEVER_NULLABLE|> id)
    {
      Repository.Delete(id);

      return true;
    }
    #endregion
  }
}