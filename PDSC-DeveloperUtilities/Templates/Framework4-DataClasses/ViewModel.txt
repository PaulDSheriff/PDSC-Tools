using <|NAMESPACE|>.DataLayer;
using <|NAMESPACE|>.EntityLayer;

using PDSC.Common;
using <|NAMESPACE|>.Common;

using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;

namespace <|NAMESPACE|>.ViewModelLayer
{
  public partial class <|CLASS_NAME|>ViewModel : AppViewModel
  {
    #region Constructors
    /// <summary>
    ///  NOTE: You need to have a parameterless constructor for Post-Backs in MVC    
    /// </summary>
    public <|CLASS_NAME|>ViewModel() : base()
    {
      Init();
    }

    {|REMOVE_WHEN:IsPrimaryKeyNotInteger|}
    public <|CLASS_NAME|>ViewModel(IRepository<<|CLASS_NAME|>, <|CLASS_NAME|>Search> repository) : base()
    {|END_REMOVE|}
    {|REMOVE_WHEN:IsPrimaryKeyInteger|}
    public <|CLASS_NAME|>ViewModel(IRepositoryOtherPK<<|PK_LANGUAGE_DATA_TYPE_NEVER_NULLABLE|>, <|CLASS_NAME|>, <|CLASS_NAME|>Search> repository) : base()
    {|END_REMOVE|}
    {
      Repository = repository;
      Init();
    }
    
    {|REMOVE_WHEN:IsPrimaryKeyNotInteger|}
    public <|CLASS_NAME|>ViewModel(IRepository<<|CLASS_NAME|>, <|CLASS_NAME|>Search> repository, DbContext db) : base()
    {|END_REMOVE|}
    {|REMOVE_WHEN:IsPrimaryKeyInteger|}
    public <|CLASS_NAME|>ViewModel(IRepositoryOtherPK<<|PK_LANGUAGE_DATA_TYPE_NEVER_NULLABLE|>, <|CLASS_NAME|>, <|CLASS_NAME|>Search> repository, DbContext db) : base()
    {|END_REMOVE|}
    {
      Repository = repository;
      DbContextObject = db;
      Init();
    }
    #endregion

    #region Properties
    {|REMOVE_WHEN:IsPrimaryKeyNotInteger|}
    public IRepository<<|CLASS_NAME|>, <|CLASS_NAME|>Search> Repository { get; set; }
    {|END_REMOVE|}
    {|REMOVE_WHEN:IsPrimaryKeyInteger|}
    public IRepositoryOtherPK<<|PK_LANGUAGE_DATA_TYPE_NEVER_NULLABLE|>, <|CLASS_NAME|>, <|CLASS_NAME|>Search> Repository { get; set; }
    {|END_REMOVE|}
    public List<<|CLASS_NAME|>> <|CLASS_NAME_PLURAL|> { get; set; }

    public <|CLASS_NAME|> SelectedEntity { get; set; }
    public <|CLASS_NAME|>Search SearchEntity { get; set; }
    #endregion
    
    #region Init Method
    public override void Init() {
      base.Init();

      SelectedEntity = new <|CLASS_NAME|>();
      SearchEntity = new <|CLASS_NAME|>Search {
        SortExpression = "<|DESCRIPTION_FIELD|>"
      };

      TotalRows = 0;
    }
    #endregion

    #region Get(id) Method
    public override void Get(<|PK_LANGUAGE_DATA_TYPE_NEVER_NULLABLE|> id)
    {
      IsAdding = false;
      IsDetailVisible = true;

      try {
        if (Repository == null) {
          throw new ApplicationException("Must set the Repository property.");
        }
        else {
          SelectedEntity = Repository.Get(id);
        }

        if (SelectedEntity != null) {
          TotalRows = 1;
        }
      }
      catch (Exception ex) {
        // Publish Exception
        PublishException(ex, DbContextObject, ((<|CLASS_NAME|>Repository)Repository).QueryObject);
      }
    }
    #endregion

    #region Search Method
    public override void Search()
    {
      IsDetailVisible = false;

      try {
        if (Repository == null)
        {
          throw new ApplicationException("Must set the Repository property.");
        }
        else
        {
          <|CLASS_NAME_PLURAL|> = Repository.Search(SearchEntity).ToList();
        }

        if (<|CLASS_NAME_PLURAL|> != null)
        {
          TotalRows = <|CLASS_NAME_PLURAL|>.Count;
        }
      }
      catch (Exception ex) {
        // Publish Exception
        PublishException(ex, DbContextObject, ((<|CLASS_NAME|>Repository)Repository).QueryObject);
      }
    }
    #endregion

    #region CreateEmpty Method
    public override void CreateEmpty()
    {
      IsAdding = true;
      // Set SelectedEntity to an empty <|CLASS_NAME|> object
      SelectedEntity = Repository.CreateEmpty();
    }
    #endregion

    #region Save Method
    public override bool Save()
    {
      bool ret = true;

      try {
        if (IsAdding)
        {
          // Adding a new <|CLASS_NAME|>
          Repository.Insert(SelectedEntity);
          IsAdding = false;
        }
        else
        {
          // Editing an existing <|CLASS_NAME|>
          Repository.Update(SelectedEntity);
        }
      }
      catch (Exception ex) {
        ret = false;
        // Publish Exception
        PublishException(ex, DbContextObject, ((<|CLASS_NAME|>Repository)Repository).QueryObject);
      }

      return ret;
    }
    #endregion

    #region Delete Method
    public override bool Delete(<|PK_LANGUAGE_DATA_TYPE_NEVER_NULLABLE|> id)
    {
      bool ret = true;

      try {
        Repository.Delete(id);
      }
      catch (Exception ex) {
        ret = false;
        // Publish Exception
        PublishException(ex, DbContextObject, ((<|CLASS_NAME|>Repository)Repository).QueryObject);
      }

      return ret;
    }
    #endregion
  }
}